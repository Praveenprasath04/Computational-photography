image = imread("data/fish.png");
imshow(image);
load("data\gaussNoise.mat")
image = im2double(image);
size(gaussNoise)
size(image)

[m,n,c] = size(image);
M = m
N = n
C= c

%%
code1 = '1010000111000001010000110011110111010111001001100111';
code2 = '1010101010101010101010101010101010101010101010101010';
code1 = arrayfun(@(x) str2double(x), code1);
code2 = arrayfun(@(x) str2double(x), code2);

first_row = [1/52 *(code1'); zeros(N-1,1)];
first_col = [1/52; zeros(N-1,1)];
A1_t = toeplitz(first_col, first_row);
A1 = transpose(A1_t);
first_row = [1/52 *(code2'); zeros(N-1,1)];
first_col = [1/52; zeros(N-1,1)];
A2_t = toeplitz(first_col, first_row);
A2 = transpose(A2_t);
total_exp1 = zeros(m,n+51,3)+im2double(gaussNoise)/255;
total_exp2 = zeros(m,n+51,3)+im2double(gaussNoise)/255;
A = zeros(n+51,n);
for i = 0:51
    temp_image = zeros(m,n+51,3);
    temp_image(1:m,i+1:n+i,:) = code1(i+1)*image(1:m,1:n,:);
    total_exp1 = total_exp1 + temp_image/sum(code1) ;
end
for i = 0:51
    temp_image = zeros(m,n+51,3);
    temp_image(1:m,i+1:n+i,:) = code2(i+1)*image(1:m,1:n,:);
    total_exp2 = total_exp2 + temp_image/sum(code2) ;
end
blurred_image1 = total_exp1;
blurred_image2 = total_exp2;
imshow(total_exp2)
%%
imshow(blurred_image2)
%%
figure
tiledlayout(1,2)
nexttile
imshow(blurred_image1);
title("Blurred Image using code 1")

nexttile
imshow(blurred_image2);
title("Blurred Image using code 2")



%%
figure
tiledlayout(1,2)
nexttile
imshow(A1*52);
title("Blur kernel-code 1")

nexttile
imshow(A2*52);
title("Blur kernel-code 2")

%%

A_conventional = A;
A1_flutter = A2; 
A2_flutter = A2;      

% Extract the first column
signal_conventional = A_conventional(:, 1);
signal_flutter = A_flutter(:, 1);

% Compute the DFTs
dft_conventional = fft(signal_conventional);
dft_flutter = fft(signal_flutter);

% Frequency bins
N = length(dft_conventional);
frequencies = (0:N-1) * (1/N); % Normalized frequencies

% Calculate magnitude and convert to dB
magnitude_conventional = 20 * log10(abs(dft_conventional));
magnitude_flutter = 20 * log10(abs(dft_flutter));

% Plot the results
figure;
hold on;

% Plot Conventional DFT
plot(frequencies, magnitude_conventional, 'b', 'DisplayName', 'Conventional DFT');

% Plot Flutter Shutter DFT
plot(frequencies, magnitude_flutter, 'r', 'DisplayName', 'Flutter Shutter DFT');

title('DFT Magnitude Comparison');
xlabel('Normalized Frequency (Hz)');
ylabel('Magnitude (dB)');
 
grid on;
legend show;
hold off;

%%
deblured1 = zeros(m,n,3);
for c =1:3
  blurred_row=blurred_image1(:,:,c);
        sol=blurred_row*pinv(A1_t);
        deblured1(:,:,c) = sol ;
end
deblured2 = zeros(m,n,3);
for c =1:3
  blurred_row=blurred_image2(:,:,c);
        sol=blurred_row*pinv(A2_t);
        deblured2(:,:,c) = sol ;
end

figure
tiledlayout(1,2)
nexttile
imshow(deblured1);
title("Deblured 1")

nexttile
imshow(deblured2);
title("Deblured 2")


%%
F = im2double(image);
rmse_1 = sqrt(mean((deblured1(:)-image(:)).^2))
rmse_2 = sqrt(mean((deblured2(:)-image(:)).^2))
%%
total_exp1 = zeros(m,n+51,3);
total_exp2 = zeros(m,n+51,3);

for i = 0:51
    temp_image = zeros(m,n+51,3);
    temp_image(1:m,i+1:n+i,:) = code1(i+1)*image(1:m,1:n,:);
    total_exp1 = total_exp1 + temp_image/52 ;
end
for i = 0:51
    temp_image = zeros(m,n+51,3);
    temp_image(1:m,i+1:n+i,:) = code2(i+1)*image(1:m,1:n,:);
    total_exp2 = total_exp2 + temp_image/52 ;
end
blurred_image1 = total_exp1;
blurred_image2 = total_exp2;

deblured1 = zeros(m,n,3);
for c =1:3
  blurred_row=blurred_image1(:,:,c);
        sol=blurred_row*pinv(A1_t);
        deblured1(:,:,c) = sol ;
end
deblured2 = zeros(m,n,3);
for c =1:3
  blurred_row=blurred_image2(:,:,c);
        sol=blurred_row*pinv(A2_t);
        deblured2(:,:,c) = sol ;
end

figure
tiledlayout(1,2)
nexttile
imshow(deblured1);
title("Deblured 1")

nexttile
imshow(deblured2);
title("Deblured 2")






